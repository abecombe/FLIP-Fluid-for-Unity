#pragma kernel AddExternalForce

#include "../Common.hlsl"

RWStructuredBuffer<float3> _GridVelocityBufferRW;

inline float GetMouseForce(float3 pos)
{
    const float distance_to_mouse_ray = length(cross(_RayDirection, pos - _RayOrigin));
    const float normalized_distance = distance_to_mouse_ray / _MouseForceParameter.w;
    return smoothstep(1.0, 0.9, normalized_distance);
}

[numthreads(128, 1, 1)]
void AddExternalForce(uint3 id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(id);

    const uint c_id = id.x;
    const uint3 c_index = CellIDToCellIndex(c_id);

    float3 c_vel = _GridVelocityBufferRW[c_id];

    // forward Euler time integration
    c_vel += _Gravity * _DeltaTime;

    // add mouse force
    const float3 c_pos = CellIndexToCellPos(c_index);
    const float3 c_pos_vx = c_pos + float3(-0.5f * _GridSpacing.x, 0.0f, 0.0f);
    const float3 c_pos_vy = c_pos + float3(0.0f, -0.5f * _GridSpacing.y, 0.0f);
    const float3 c_pos_vz = c_pos + float3(0.0f, 0.0f, -0.5f * _GridSpacing.z);
    float3 mouse_force = float3(GetMouseForce(c_pos_vx), GetMouseForce(c_pos_vy), GetMouseForce(c_pos_vz));
    mouse_force *= _MouseForceParameter.xyz;
    c_vel += mouse_force * _DeltaTime;

    ENFORCE_BOUNDARY_CONDITION(c_index, c_vel);

    _GridVelocityBufferRW[c_id] = c_vel;
}