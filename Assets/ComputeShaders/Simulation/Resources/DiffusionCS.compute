#pragma kernel Diffuse
#pragma kernel UpdateVelocity

#include "../Common.hlsl"

float4 _DiffusionParameter;

StructuredBuffer<uint> _GridTypeBufferRead;

StructuredBuffer<float3> _GridVelocityBufferRead;
RWStructuredBuffer<float3> _GridVelocityBufferWrite;

StructuredBuffer<float3> _GridDiffusionBufferRead;
RWStructuredBuffer<float3> _GridDiffusionBufferWrite;

[numthreads(128, 1, 1)]
void Diffuse(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = thread_id.x;
    const int3 c_index = CellIDToCellIndex(c_id);

    // diffuse using Jacobi iterations
    const int3 c_index_xn = c_index + int3(1, 0, 0);
    const int3 c_index_yn = c_index + int3(0, 1, 0);
    const int3 c_index_zn = c_index + int3(0, 0, 1);

    const uint c_id_xp = CellIndexToCellID(c_index + int3(-1, 0, 0));
    const uint c_id_xn = CellIndexToCellID(c_index_xn);
    const uint c_id_yp = CellIndexToCellID(c_index + int3(0, -1, 0));
    const uint c_id_yn = CellIndexToCellID(c_index_yn);
    const uint c_id_zp = CellIndexToCellID(c_index + int3(0, 0, -1));
    const uint c_id_zn = CellIndexToCellID(c_index_zn);

    float3 velocity = 0;

    velocity += _DiffusionParameter.x * _GridDiffusionBufferRead[_GridTypeBufferRead[c_id_xp] == GT_FLUID ? c_id_xp : c_id];
    velocity += _DiffusionParameter.x * (c_index_xn < _GridSize ? _GridDiffusionBufferRead[_GridTypeBufferRead[c_id_xn] == GT_FLUID ? c_id_xn : c_id] : 0.0f);
    velocity += _DiffusionParameter.y * _GridDiffusionBufferRead[_GridTypeBufferRead[c_id_yp] == GT_FLUID ? c_id_yp : c_id];
    velocity += _DiffusionParameter.y * (c_index_yn < _GridSize ? _GridDiffusionBufferRead[_GridTypeBufferRead[c_id_yn] == GT_FLUID ? c_id_yn : c_id] : 0.0f);
    velocity += _DiffusionParameter.z * _GridDiffusionBufferRead[_GridTypeBufferRead[c_id_zp] == GT_FLUID ? c_id_zp : c_id];
    velocity += _DiffusionParameter.z * (c_index_zn < _GridSize ? _GridDiffusionBufferRead[_GridTypeBufferRead[c_id_zn] == GT_FLUID ? c_id_zn : c_id] : 0.0f);
    velocity += _DiffusionParameter.w * _GridVelocityBufferRead[c_id];

    EnforceBoundaryCondition(velocity, c_index);

    _GridDiffusionBufferWrite[c_id] = velocity;
}

[numthreads(128, 1, 1)]
void UpdateVelocity(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = thread_id.x;
    const int3 c_index = CellIDToCellIndex(c_id);

    float3 velocity = _GridDiffusionBufferRead[c_id];

    EnforceBoundaryCondition(velocity, c_index);

    _GridVelocityBufferWrite[c_id] = velocity;
}