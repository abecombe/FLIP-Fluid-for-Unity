#pragma kernel AdvectVelocity
#pragma kernel AdvectScalar

#define USE_LINEAR_KERNEL

#include "../Common.hlsl"
#include "../GridParamsSampling.hlsl"

float2 _ScalarFieldDecay; // x: density, y: temperature

StructuredBuffer<float3> _GridVelocityBufferRead;
StructuredBuffer<float> _GridDensityBufferRead;
StructuredBuffer<float> _GridTemperatureBufferRead;

RWStructuredBuffer<float3> _GridVelocityBufferWrite;
RWStructuredBuffer<float> _GridDensityBufferWrite;
RWStructuredBuffer<float> _GridTemperatureBufferWrite;

[numthreads(128, 1, 1)]
void AdvectVelocity(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = thread_id.x;
    const int3 c_index = CellIDToCellIndex(c_id);

    const float3 position = CellIndexToWorldPos(c_index);

    const float3 middle_pos = position - SampleGridParam(position, _GridVelocityBufferRead) * _DeltaTime * 0.5f;
    const float3 sample_pos = position - SampleGridParam(middle_pos, _GridVelocityBufferRead) * _DeltaTime;
    const float3 velocity = SampleGridParam(sample_pos, _GridVelocityBufferRead);

    _GridVelocityBufferWrite[c_id] = velocity;
}

[numthreads(128, 1, 1)]
void AdvectScalar(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint c_id = thread_id.x;
    const int3 c_index = CellIDToCellIndex(c_id);

    const float3 position = CellIndexToWorldPos(c_index);

    const float3 middle_pos = position - SampleGridParam(position, _GridVelocityBufferRead) * _DeltaTime * 0.5f;
    const float3 sample_pos = position - SampleGridParam(middle_pos, _GridVelocityBufferRead) * _DeltaTime;
    float density = SampleGridParam(sample_pos, _GridDensityBufferRead);
    float temperature = SampleGridParam(sample_pos, _GridTemperatureBufferRead);

    density *= _ScalarFieldDecay.x;
    temperature *= _ScalarFieldDecay.y;

    _GridDensityBufferWrite[c_id] = density;
    _GridTemperatureBufferWrite[c_id] = temperature;
}